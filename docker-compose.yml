version: '3.9'
# docker-compose up --build
networks:
  app-network:
    driver: bridge

services:

  poc.api.sqlserver-webapi:
    image: ${DOCKER_REGISTRY-}poc.api.sqlserver-webapi
    container_name: poc.api.sqlserver-webapi
    restart: always
    build:
      context: .
      dockerfile: src/poc.api.sqlserver.net8/Dockerfile
    expose:
      - 5071
    ports:
      - 5071:5071
    links:
      - sqlserver
      - rabbitmq
      - mongoserver
      - kafka
    networks:
      - app-network
    depends_on:
      - sqlserver
      - rabbitmq 
      - mongoserver
      - kafka

  poc.api.redis-webapi:
    image: ${DOCKER_REGISTRY-}poc.api.redis-webapi
    container_name: poc.api.redis-webapi
    restart: always
    build:
      context: .
      dockerfile: src/poc.api.redis.net8/Dockerfile
    expose:
      - 5074
    ports:
      - 5074:5074
    links:
      - redis
      - rabbitmq 
      - mongoserver
      - kafka
    networks:
      - app-network
    depends_on:
      - redis
      - rabbitmq 
      - mongoserver
      - kafka

  # SQL Server
  # Add-Migration Inicial -Context SqlServerDb
  # Update-Database -Context SqlServerDb
  sqlserver:
    image: mcr.microsoft.com/azure-sql-edge:latest
    cap_add: [ 'SYS_PTRACE' ]
    hostname: mssql
    container_name: sqlserver
    restart: always
    expose:
      - 1433
    ports:
      - 1433:1433
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=@Poc2Minimal@Api
    networks:
      - app-network
      
  # Redis Cache Server
  redis:
    image: redis:latest
    container_name: redis
    command: redis-server --requirepass Poc2Minimal@Api
    restart: always
    expose:
      - 6379
    ports:
      - 6379:6379
    networks:
      - app-network

  mongoserver:
    image: mongo:latest
    container_name: mongoserver
    restart: always
    expose:
      - 27017
    ports:
      - 27017:27017
    networks:
      - app-network

  # http://localhost:15672
  # usuÃ¡rio guest 
  # senha guest
  # Rabbit MQ
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq
    restart: always
    expose:
      - 15672
    ports:
        - 5672:5672
        - 15672:15672
    volumes:
        - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
        - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
    networks:
        - app-network
  

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks: 
      - app-network

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
    networks: 
      - app-network

  schema-registry:
    image: confluentinc/cp-schema-registry:latest
    depends_on:
      - zookeeper
      - kafka
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:9092
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    networks: 
      - app-network

  kafka-connect:
    image: confluentinc/cp-kafka-connect:latest
    depends_on:
      - kafka
      - schema-registry
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: kafka:9092
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: kafka-connect
      CONNECT_CONFIG_STORAGE_TOPIC: connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: connect-status
      CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONNECT_INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
    networks: 
      - app-network
      
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      KAFKA_CLUSTERS_0_SCHEMAREGISTRY: http://schema-registry:8081
    networks: 
      - app-network

  kafka-init:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - kafka
    command: >
      bash -c "
        cub kafka-ready -b kafka:9092 1 20 &&
        kafka-topics --create --if-not-exists --bootstrap-server kafka:9092 --partitions 1 --replication-factor 1 --topic CRIAR_PRODUTO &&
        kafka-topics --create --if-not-exists --bootstrap-server kafka:9092 --partitions 1 --replication-factor 1 --topic ALTERAR_PRODUTO &&
        kafka-topics --create --if-not-exists --bootstrap-server kafka:9092 --partitions 1 --replication-factor 1 --topic REMOVER_PRODUTO "
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks: 
      - app-network


  # zookeeper:
  #   image: confluentinc/cp-zookeeper:latest
  #   restart: always
  #   ports:
  #     - 2181:2181
  #   environment:
  #     ZOOKEEPER_CLIENT_PORT: 2181
  #     ZOOKEEPER_TICK_TIME: 2000
  #   networks: 
  #     - app-network
  
  # kafka:
  #   image: confluentinc/cp-kafka:latest
  #   restart: always
  #   depends_on:
  #     - zookeeper
  #   ports:
  #     - 9092:9092
  #     - 29092:29092
  #   environment:
  #     KAFKA_BROKER_ID: 1
  #     KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
  #     KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
  #     KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #     KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
  #     KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
  #     KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
  #     KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   networks: 
  #     - app-network
     
  # kafka-init:
  #   image: confluentinc/cp-kafka:latest
  #   depends_on:
  #     - kafka
  #   command: >
  #     bash -c "
  #       cub kafka-ready -b kafka:9092 1 20 &&
  #       kafka-topics --create --if-not-exists --bootstrap-server kafka:9092 --partitions 1 --replication-factor 1 --topic CRIAR_PRODUTO &&
  #       kafka-topics --create --if-not-exists --bootstrap-server kafka:9092 --partitions 1 --replication-factor 1 --topic ALTERAR_PRODUTO &&
  #       kafka-topics --create --if-not-exists --bootstrap-server kafka:9092 --partitions 1 --replication-factor 1 --topic REMOVER_PRODUTO "
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   networks: 
  #     - app-network

  # kafka-ui:
  #   image: provectuslabs/kafka-ui:latest
  #   ports:
  #     - "8080:8080"
  #   environment:
  #     KAFKA_CLUSTERS_0_NAME: local
  #     KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: localhost:9092
  #     KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
  #   networks: 
  #     - app-network
  
